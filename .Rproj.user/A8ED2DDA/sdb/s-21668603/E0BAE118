{
    "collab_server" : "",
    "contents" : "options(shiny.maxRequestSize=50*1024^2) \nlibrary(data.table)\nlibrary(corrplot)\nlibrary(mlbench)\nlibrary(InformationValue)\noptions(scipen = 999)\n\ndata = data.table(read.csv('data/train.csv'))\n# data = data.table(input$data_file)\n\nshinyServer(function(input, output, clientData, session) {\n\t\n\tmydata <- reactive({\n\t\t\n\t\t\tif(is.null(input$data_file)){\n\t\t\t\tdata\n\t\t\t\n\t\t\t} else {\n\t\t\t\ttry(data.table(read.csv(input$data_file$datapath)),silent = T)\n\t\t\t}\n\t\t\n\t\t\n\t})\n\toutput$target_variable = renderUI({\n\t\n\t\tif (is.null(mydata()))\treturn(selectInput(\"target_variable\", \"Target variable:\",  c(\"\")), selected = \"\")\n\t\t# validate(need(!is.null(mydata())&(mydata()$target_variable != '')&levels(as.factor(mydata()[[input$target_variable]])) %in% c('0','1')), \"Please select Target variable with '0' and '1' values/levels.\")\n\t\t\n\t\tselectInput(\"target_variable\", \"Target variable:\", c(\"\", colnames(mydata())), selected = \"\")\n\t\t})\n\toutput$ID_column = renderUI({\n\t\t\n\t\tif (is.null(mydata()))\treturn(selectInput(\"ID_column\", \"ID column:\",  c(\"\")), selected = \"\")\n\t\tselectInput(\"ID_column\", \"ID column:\",  c(\"\", colnames(mydata())), selected = \"\")\n\t})\n# \toutput$selectUI <- renderUI({ \n# \t\tselectInput(\"target_class\", \"Target class:\", levels(as.factor(data[[input$target_variable]])), selected = \"\")\n# \t})\n# \t\tobserveEvent(\tdataInput(),{\n# \t\tprogress <- shiny::Progress$new()\n# \t\tprogress$set(message = \"Tuning the model...\", value = 0)\n# \t\t# Close the progress when this reactive exits (even if there's an error)\n# \t\ton.exit({ progress$close() })\n# \t\t})\n\t\tdataInput <- reactive({\n\t\t\t\n\t\t\t\n\t\t\ttry(robust_scoring(mydata(),target_variable = input$target_variable,ID_column = input$ID_column, training_perc = input$training_perc, good_perc = input$good_perc),silent = T)\n\t\t})\n\t\tinputCutoff =  reactive({\n\t\t\ttry(ifelse(dataInput()$prob$prob > input$cut_off,1,0),silent = T)\n\t\t})\n\t\tinputCutoffVal =  reactive({\n\t\t\ttry(input$cut_off,silent = T)\n\t\t})\n\t\n\toutput$data <- renderDataTable({\n\t\tprogress <- shiny::Progress$new(session)\n\t\ton.exit(progress$close())\n\t\t\n\t\tprogress$set(message = 'Uploading the dataset...',\n\t\t\t\t\t detail = 'Stay tuned!')\n\t\n\t\tmydata()\n\n\t}, options = list(pageLength = 20))\n\t\n\n\toutput$woe_table <- renderDataTable({\n\t\tif(class(dataInput()) != 'list')\treturn()\n\t\t# \t\tvalidate(need(input$first_epicenter_name != \"\", \"Please specify both epicenters and click 'Run Calc' button.\"))\n\t\t# \t\tvalidate(need(input$second_epicenter_name != \"\", \"Please specify both epicenters and click 'Run Calc' button.\"))\n\t\t\n\t\t\n\t\t# m = robust_scoring(data,input$target_variable)\n\t\t\n\t\t# res = data.table(rbindlist(m$woe_table))\n\t\tres = data.table(rbindlist(dataInput()$woe_table))\n\t\tres\n\n\t}, options = list(pageLength = 20))\n\t\n\toutput$scorecard <- renderDataTable({\n\t\tif(class(dataInput()) != 'list')\treturn()\n\t\t\n\t\tres = data.table(dataInput()$scorecard)\n\t\tres\n\n\t}, options = list(pageLength = 20))\n\t\n\toutput$reg_coef <- renderDataTable({\n\t\tif(class(dataInput()) != 'list')\treturn()\n\t\tres = \tcbind(rownames(summary(dataInput()$glm)$coefficients ),summary(dataInput()$glm)$coefficients)\n\t\t\n\t}, options = list(pageLength = 20))\n# \toutput$reg_coef <- renderPrint({\n# \t\n# \t\tprint(summary(dataInput()$glm))\n# \t})\n\t\n\toutput$corr_matrix <- renderPlot({\n\t\tif(class(dataInput()) != 'list')\treturn()\n\t\tcorrplot(dataInput()$corr_matrix, method = \"number\")\n\t})\n\t\n\toutput$ROC <- renderPlot({\n\t\t   progress <- shiny::Progress$new(session)\n\t\t    on.exit(progress$close())\n\t\t\n\t       progress$set(message = 'Building the model...',\n\t\t                 detail = 'Stay tuned!')\n\t\tif(class(dataInput()) != 'list')\treturn()\n\t\tplot(dataInput()$roc)\n\t\ttitle(main = sprintf('ROC CURVE. AUC = %f, Gini = %f',as.numeric(dataInput()$auc),2*as.numeric(dataInput()$auc)-1), ,line = 3)\n\t})\n\t\n\toutput$probabilities <-  renderDataTable({\n\t\tif(class(dataInput()) != 'list')\treturn()\n\t\tres = dataInput()$prob\n\t\tres = res[,`:=`(PredictedClass = inputCutoff())]\n\t\tres\n\t\t\n\t}, options = list(pageLength = 20))\n\t\n\toutput$error_matrix <- renderDataTable({\n\t\tif(class(dataInput()) != 'list')\treturn()\n\t\tres = dataInput()$prob\n\t\tres = table(res$prob > inputCutoffVal(), res$TARGET)\n\t\tres = cbind(c('Predicted Class = 0','PredictedClass = 1'),res)\n\t\tcolnames(res) = (c('','Target Class = 0','Target Class = 1'))\n\t\tres\n\t\t\n\t}, options = list(pageLength = 20))\n\t\n\toutput$downloadtable <- downloadHandler(#### called from UI\n        filename = function() {paste('scorecard_',format(Sys.time(), \"%Y%M%d_%H%M%S\"),'.csv', sep='')},\n        content = function (file){\n\t\t\tif(class(dataInput()) != 'list') {\n\t\t\t\twrite.csv(data.table(a= c(1,2),b = c(3,4)))\n\t\t\t} else {\n\t\t\tres = data.table(dataInput()$scorecard)\n\t\t\twrite.csv(res,file)\n\t\t\t}\n\t\t}\n\t)\n    \n\t\n\t\n\tsession$onSessionEnded(function() {\n\t\tstopApp()\n\t})\n\t\n\n})\n",
    "created" : 1512739791192.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "577773623",
    "id" : "E0BAE118",
    "lastKnownWriteTime" : 1512740104,
    "last_content_update" : 1512740104075,
    "path" : "~/Documents/Work/Git/scorecard_builder_app/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}